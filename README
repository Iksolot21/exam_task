# Анализ изображений с преобразованием Радона

Этот проект представляет собой веб-приложение на Flask, предназначенное для анализа изображений с использованием преобразования Радона, низкочастотной фильтрации и расчета метрики SSIM.

## Описание

Приложение позволяет пользователю:

*   Генерировать тестовые изображения фантома Шеппа-Логана с добавлением гауссового шума.
*   Выполнять преобразование Радона для исходного и зашумленного изображений.
*   Анализировать срезы синограмм, полученных после преобразования Радона.
*   Применять низкочастотную фильтрацию к изображениям в частотной области.
*   Рассчитывать метрику SSIM для оценки качества изображений после фильтрации.

## Технологии

*   **Backend:**
    *   Python 3.11+
    *   Flask (веб-фреймворк)
    *   NumPy (для математических вычислений и работы с массивами)
    *   Matplotlib (для визуализации изображений)
    *   scikit-image (для преобразования Радона и расчета SSIM)
    *   phantominator (генерация фантома Шеппа-Логана)
    *   prettytable (для создания таблиц)
    *   waitress (для запуска Flask в production)

*   **Frontend:**
    *   HTML
    *   CSS
    *   JavaScript
    *   Bootstrap (CSS фреймворк)

## Структура проекта

exzame_task/
├── app.py # Основной файл Flask-приложения
├── README.md # Этот файл
├── requirements.txt # Список зависимостей Python
├── render.yaml # Конфигурация для развертывания на Render.com
├── static/
│ ├── css/
│ │ └── style.css # Стили CSS
│ └── js/
│ └── main.js # JavaScript-код
├── templates/
│ └── index.html # HTML-шаблон
└── utils/
├── image_processing.py # Функции обработки изображений
└── init.py # Файл инициализации пакета utils

## Развертывание
Проект может быть легко развернут с помощью Render.com.  Убедитесь, что у вас есть аккаунт Render.com и подключенный репозиторий GitHub.

1.  **Создайте веб-сервис на Render.com:**
2.  **Укажите репозиторий GitHub:** Подключите репозиторий, содержащий ваш код.
3.  **Настройте параметры:**
    *   **Runtime:** Python
    *   **Build Command:** `pip install -r requirements.txt`
    *   **Start Command:** `waitress-serve --listen=$PORT app:app`
    *   **Health Check Path:** `/`
4.  **Добавьте переменные окружения:**
    *   `PYTHON_VERSION`:  Укажите версию Python (например, `3.11.11`).

## Запуск локально (для разработки)

1.  **Установите зависимости:**

    ```bash
    pip install -r requirements.txt
    ```

2.  **Запустите Flask-приложение:**

    ```bash
    python app.py
    ```

    или

    ```bash
    flask run
    ```

3.  **Откройте в браузере:** Перейдите по адресу `http://127.0.0.1:5000/` в вашем браузере.

## Использование

1.  **Генерация изображений:** Используйте форму для генерации тестовых изображений с заданными параметрами шума.
2.  **Преобразование Радона:** Нажмите кнопку "Выполнить преобразование Радона", чтобы получить синограммы для исходного и зашумленного изображений.
3.  **Анализ срезов:** Измените угол среза и нажмите кнопку "Анализ срезов", чтобы визуализировать срезы синограмм и их спектры.
4.  **Двумерный спектр:** Нажмите кнопку "Двумерный спектр", чтобы применить низкочастотную фильтрацию к изображениям и отобразить результаты.
5.  **Анализ SSIM:** Перейдите к секции "Анализ SSIM" и задайте параметры для анализа метрики SSIM для набора изображений.

## Зависимости
Все зависимости указаны в файле `requirements.txt`. Для установки зависимостей используйте команду `pip install -r requirements.txt`.

## Авторы
[Iksolot21](https://github.com/Iksolot21)
